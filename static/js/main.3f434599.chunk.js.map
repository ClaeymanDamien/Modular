{"version":3,"sources":["img/logo.png","Header.js","Trend.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","Navbar_default","variant","className","Brand","href","alt","src","Logo","width","height","MainTrend","es","smooth","autoDraw","autoDrawDuration","autoDrawEasing","data","gradient","radius","strokeWidth","strokeLinecap","App","src_Header_0","Zoom_default","src_Trend","index_esm","value","maxValue","text","concat","styles","buildStyles","pathColor","trailColor","textColor","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4RCqBzBC,EAdA,kBACPC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,QAAQ,QAAQC,UAAU,4GAC9BL,EAAAC,EAAAC,cAACC,EAAAF,EAAOK,MAAR,CAAcC,KAAK,GAAGF,UAAU,4EAC5BL,EAAAC,EAAAC,cAAA,OACIM,IAAI,GACJC,IAAKC,IACLC,MAAM,MACNC,OAAO,MACPP,UAAU,wCAEdL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,yBAAd,0BCGDQ,SAhBG,kBACdb,EAAAC,EAAAC,cAAA,OAAKG,UAAU,wBACXL,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACIC,QAAM,EACNC,UAAQ,EACRC,iBAAkB,KAClBC,eAAe,WACfC,KAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACpCC,SAAU,CAAC,SAAU,SAAU,OAC/BC,OAAQ,IACRC,YAAa,IACbC,cAAe,8CC8DZC,MApEf,WAGE,OACExB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gCACbL,EAAAC,EAAAC,cAACuB,EAAD,MAEAzB,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,KACED,EAAAC,EAAAC,cAAA,OAAKG,UAAU,+CACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,uBACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,yBAAd,gCAEFL,EAAAC,EAAAC,cAACyB,EAAD,SAKN3B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,4FACbL,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,KACED,EAAAC,EAAAC,cAAA,OAAKG,UAAU,wFACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,yBAAd,2BAEFL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACbL,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CACYC,MAAO,GACPxB,UAAU,YACVyB,SAAU,GACVC,KAAI,GAAAC,OAAK,GAAL,OACJV,YAAa,EACbW,OAAQC,YAAY,CAClBC,UAAW,MACXC,WAAY,OACZC,UAAa,aAOjCrC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eAGfL,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,KACED,EAAAC,EAAAC,cAAA,OAAKG,UAAU,+FACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,yBAAd,uBAEFL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,0FACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gCAAhB,WACAL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,uBAAhB,YAEFL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gCAAhB,WACAL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,uBAAhB,gBAMZL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aC3DDiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3f434599.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0b9ffb0c.png\";","import React from 'react'\r\nimport './Header.css'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Logo from './img/logo.png'\r\n\r\n\r\n\r\nconst Header = () => (\r\n        <Navbar variant=\"light\" className=\"col-lg-10 offset-lg-1 p-5 pb-3 justify-content-center justify-content-lg-start d-flex align-items-center\">\r\n            <Navbar.Brand href=\"\" className=\"d-flex flex-column flex-sm-row justify-content-center align-items-center\">\r\n                <img\r\n                    alt=\"\"\r\n                    src={Logo}\r\n                    width=\"100\"\r\n                    height=\"100\"\r\n                    className=\"d-inline-block align-center mr-sm-5\"\r\n                />\r\n                <h1 className=\"display-3 text-center\">Mødular.</h1>  \r\n            </Navbar.Brand>\r\n        </Navbar>\r\n)\r\nexport default Header;","import React from 'react'\r\nimport Trend from 'react-trend'\r\nimport './Trend.css'\r\n\r\nconst MainTrend = () => (\r\n    <div className=\"label_trend bg-white\">\r\n        <Trend\r\n            smooth\r\n            autoDraw\r\n            autoDrawDuration={2500}\r\n            autoDrawEasing=\"ease-out\"\r\n            data={[0,2,5,9,5,10,3,5,0,0,1,8,2,9,0]}\r\n            gradient={['yellow', 'orange', 'red']}\r\n            radius={5.7}\r\n            strokeWidth={0.75}\r\n            strokeLinecap={'square'}\r\n        />\r\n    </div>\r\n    \r\n);\r\nexport default MainTrend;","import React from 'react';\n\nimport './App.css';\nimport Header from './Header';\nimport MainTrend from './Trend';\nimport { CircularProgressbar, buildStyles, } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css'; \nimport Zoom from 'react-reveal/Zoom';\n\nfunction App() {\n  \n\n  return (\n    <div className=\"crous bg-light pb-5 bg_plate\">\n      <Header />\n      \n      <Zoom>\n        <div className=\"mt-2 pb-5 pt-5 col-lg-10 col-12 offset-lg-1\">\n          <div className=\"col-12 bg-white p-0\">\n            <div className=\"p-4\">\n              <h2 className=\"text-center display-4\">Temps d'attente aujourd'hui</h2>\n            </div>\n            <MainTrend />\n          </div>\n        </div>\n      </Zoom>\n\n      <div className=\"col-lg-10 col-12 offset-lg-1 d-flex justify-content-between mt-5 flex-column flex-md-row\">\n        <Zoom>\n          <div className=\"col-lg bg-white p-5 m-0 d-flex flex-column justify-content-center align-items-center\">\n            <div className=\"pt-5 pt-lg-0\">\n              <h2 className=\"display-4 text-center\">Temps d'attente actuel</h2>\n            </div>\n            <div className=\"col-10 p-4\">\n              <CircularProgressbar\n                          value={10}\n                          className=\"display-4\"\n                          maxValue={30}\n                          text={`${10}min`} \n                          strokeWidth={3}\n                          styles={buildStyles({\n                            pathColor: 'red',\n                            trailColor: '#eee',\n                            textColor :  'red',\n                          })}       \n              />\n            </div>\n          </div>\n        </Zoom>\n        \n        <div className=\"col-1 mb-5\">\n        </div>\n        \n        <Zoom>\n          <div className=\"col-lg bg-white p-lg-5 p-3 m-0 d-flex flex-column justify-content-center align-items-center\">\n            <div className=\"pt-5 pt-lg-0\">\n              <h2 className=\"display-4 text-center\">Heure conseillé</h2>\n            </div>\n            <div className=\"col-10 p-lg-4 d-flex flex-column justify-content-center text-center align-items-center\">\n                <div className=\"pb-4 pt-4\">\n                  <span className=\"display-2 d-none d-lg-inline\">13 : 45</span>\n                  <span className=\"display-4 d-lg-none\">13 : 45</span>\n                </div>\n                <div className=\"pb-4 pt-4\">\n                  <span className=\"display-2 d-none d-lg-inline\">14 : 10</span>\n                  <span className=\"display-4 d-lg-none\">14 : 10</span>\n                </div>\n            </div>\n          </div>\n          </Zoom>\n        </div>\n      <div className=\"big_pb\"></div>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}